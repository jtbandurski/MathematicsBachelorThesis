{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cumulative_window_MLP","provenance":[{"file_id":"1iRJjo62ppmlUKEZ4i-bToSH0ykPkCATE","timestamp":1654469562766},{"file_id":"1pBreahy0JvRPpbMG8XNINvDlzUynCr-l","timestamp":1654381463683}],"collapsed_sections":[],"mount_file_id":"1iRJjo62ppmlUKEZ4i-bToSH0ykPkCATE","authorship_tag":"ABX9TyMbAcqtQN1py75T8kRIOV3/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"piTp3ksGTlk-"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import openpyxl\n","import keras \n","import time\n","import tensorflow\n","import math\n","import pickle\n","\n","from keras.models import Sequential \n","from keras.layers import Dense, BatchNormalization, LeakyReLU\n","from tensorflow.keras.optimizers import SGD \n","from tensorflow.keras import initializers\n","from keras.callbacks import EarlyStopping\n","from keras.callbacks import CSVLogger\n","from sklearn import preprocessing \n","from sklearn.preprocessing import scale\n","\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.utils import set_random_seed\n","from tensorflow.keras.backend.experimental import enable_tf_random_generator\n","from tensorflow.keras.preprocessing import timeseries_dataset_from_array\n","from tensorflow.keras.callbacks import Callback, LearningRateScheduler, TensorBoard\n","set_random_seed(2022)\n","from matplotlib import pyplot as plt\n","%matplotlib inline\n","%load_ext tensorboard\n","\n","#parametry\n","from keras.utils.layer_utils import count_params\n","#scheduler\n","from tensorflow.keras.optimizers.schedules import ExponentialDecay, PolynomialDecay, InverseTimeDecay\n","#cross valid\n","from sklearn.model_selection import KFold\n","#customowe metryki\n","from keras import backend as K"]},{"cell_type":"code","source":["#Dane\n","df = pd.read_excel ('/content/drive/My Drive/Colab Notebooks2/danev2.xlsx',engine='openpyxl')\n","df.drop('Unnamed: 0',axis=1,inplace=True)\n","\n","df = df.iloc[1:df.shape[0]].reset_index(drop=True)\n","\n","target = df.columns[0]\n","features = list(df.columns)\n","del features[0]\n","\n","df1 = df.copy(deep=True)\n","for col in features:\n","  df1[col+'2'] = df1[col]**2\n","\n","for col in features:\n","  df1[col+'0'] = np.where(df1['SMALL LoBM']<0,0,df1[col])\n","\n","features1 = list(df1.columns)\n","del features1[0]\n","\n","df2 = df.copy(deep=True)\n","\n","for col in features:\n","  df2[col+'0'] = np.where(df2['SMALL LoBM']<0,0,df2[col])\n","\n","features2 = list(df2.columns)\n","del features2[0]"],"metadata":{"id":"hJ4ULeMHozCI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#dodatkowe metryki\n","def R2(y_true, y_pred):\n","    SS_res =  K.sum(K.square( y_true-y_pred )) \n","    SS_tot = K.sum(K.square( y_true - K.mean(y_true) ) ) \n","    return ( 1 - SS_res/(SS_tot + K.epsilon()) )\n","\n","def R2oos(y_true, y_pred):\n","    SS_res =  K.sum(K.square( y_true-y_pred )) \n","    SS_tot = K.sum(K.square( y_true ) ) \n","    return ( 1 - SS_res/(SS_tot + K.epsilon()) )"],"metadata":{"id":"UkMknep3owaX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Definicja modelu\n","def NN(layers, inputShape, outputShape):\n","  tensorflow.keras.backend.experimental.enable_tf_random_generator()\n","  set_random_seed(2022)\n","\n","  model = Sequential()\n","  model.add(Dense(layers[0],input_shape=(inputShape,), kernel_initializer =\n","                  initializers.RandomNormal(mean=0., stddev=1.),\n","                  bias_initializer=initializers.Constant(value=0.01),\n","                  activation=LeakyReLU(alpha=0.1)))\n","  for i in range(1, len(layers)):\n","    model.add(Dense(layers[i], kernel_initializer = \n","                    initializers.RandomNormal(mean=0., stddev=1.),\n","                    bias_initializer=initializers.Constant(value=0.01), \n","                    activation = LeakyReLU(alpha=0.1)))\n","  \n","  model.add(Dense(outputShape, \n","                  kernel_initializer = \n","                  initializers.RandomNormal(mean=0., stddev=1.),\n","                  bias_initializer=initializers.Constant(value=0.01)))\n","  return model"],"metadata":{"id":"FkuGKZ2mo87M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class PrintLearningRate(Callback):\n","    def __init__(self):\n","        pass\n","\n","    def on_epoch_begin(self, epoch, logs=None):\n","        lr = K.eval(self.model.optimizer._decayed_lr(tensorflow.float64))\n","        print(\"\\nLearning rate at epoch {} is {}\".format(epoch, lr))"],"metadata":{"id":"KhXOB28BY53I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#wygenerowanie okien czasowych\n","indeksy = list(range(0,len(df)))\n","train_ids = timeseries_dataset_from_array(\n","    data=indeksy,\n","    targets=None,\n","    sequence_length=252*18,\n","    sequence_stride=252,\n","    sampling_rate=1,\n","    batch_size=1,\n","    shuffle=False,\n","    seed=2022,\n","    start_index=0,\n","    end_index=None,\n",")\n","for batch in train_sets:\n","  print(df[features].iloc[tensorflow.squeeze(batch)])\n","\n","#test\n","test_ids = timeseries_dataset_from_array(\n","    data=indeksy,\n","    targets=None,\n","    sequence_length=252,\n","    sequence_stride=252,\n","    sampling_rate=1,\n","    batch_size=1,\n","    shuffle=False,\n","    seed=2022,\n","    start_index=252*18,\n","    end_index=None,\n",")\n","# for batch in test_sets:\n","#   print(batch)\n","# for (train_ids, test_ids) in zip(train_ids, test_ids):\n","#   print(df[features].iloc[tensorflow.squeeze(train_ids)],'||||||||||||||||',test_ids)"],"metadata":{"id":"TNEtjWeVuzEI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#plik z wynikami\n","wyniki = pd.DataFrame({'Model':[], 'MSE':[] , 'R2':[], 'Czas':[]})\n","wyniki\n","# wyniki = wyniki.append({'Model': 'name', 'MSE': 1, 'R2':2, 'Czas':3},ignore_index=True)"],"metadata":{"id":"eA1BZfag8Iz5","executionInfo":{"status":"ok","timestamp":1654419784961,"user_tz":-120,"elapsed":456,"user":{"displayName":"Jakub Bandurski","userId":"10999677327056413618"}},"colab":{"base_uri":"https://localhost:8080/","height":49},"outputId":"21285f04-3e77-4628-f2c1-4fc2ccae8796"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Model, MSE, R2, Czas]\n","Index: []"],"text/html":["\n","  <div id=\"df-d11a2677-24f2-477b-8fe4-261298580b5f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>MSE</th>\n","      <th>R2</th>\n","      <th>Czas</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d11a2677-24f2-477b-8fe4-261298580b5f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d11a2677-24f2-477b-8fe4-261298580b5f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d11a2677-24f2-477b-8fe4-261298580b5f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#Wrapper do moving window\n","def moving_window(layers, inputShape, outputShape, name, data, train_ids, test_ids, target, features, type_of_GD, epochs, save=True):\n","  tensorflow.keras.backend.experimental.enable_tf_random_generator()\n","  set_random_seed(2022)\n","  \n","  metrics = ['mse',R2,R2oos]\n","  testResults = []\n","  model = NN(layers, inputShape, outputShape)\n","  #Trening\n","  start = time.time()\n","  for (train_id, test_id) in zip(train_ids, test_ids):\n","    start1 = time.time()\n","    train_set = data.iloc[tensorflow.squeeze(train_id)]\n","    test_set = data.iloc[tensorflow.squeeze(test_id)]\n","    #Preprocessing\n","    x_train = preprocessing.scale(train_set[features])\n","    scaler = preprocessing.StandardScaler().fit(train_set[features])\n","    x_test = scaler.transform(test_set[features])\n","    y_train = train_set[target]\n","    y_test = test_set[target]\n","\n","    model.compile(\n","        loss = 'mse', \n","        optimizer = SGD(learning_rate=ExponentialDecay(\n","        initial_learning_rate=0.1,\n","        decay_steps=10000,\n","        decay_rate=math.exp(-1)),\n","        global_clipnorm = 1), \n","        metrics = metrics,\n","    )\n","\n","    if type_of_GD == 'GD':\n","        history = model.fit(\n","            x_train, y_train,    \n","            batch_size=len(x_train), \n","            epochs = epochs, \n","            verbose = 0,\n","            validation_split = 0,\n","            validation_data=(x_test, y_test),\n","            shuffle  = False,\n","            # callbacks=[EarlyStopping(monitor='val_loss',patience=100,restore_best_weights=True,min_delta=0.001)]\n","        )\n","    elif type_of_GD == 'SGD':\n","        history = model.fit(\n","          x_train, y_train,    \n","          batch_size=1, \n","          epochs = epochs,\n","          steps_per_epoch=1,\n","          validation_steps=1,\n","          verbose = 0,\n","          validation_split = 0,\n","          validation_data=(x_test, y_test),\n","          shuffle  = True,\n","          # callbacks=[EarlyStopping(monitor='val_loss',patience=100,restore_best_weights=True,min_delta=0.001)]\n","      )\n","  \n","    testResults.append(model.evaluate(x_test, y_test, verbose = 0))\n","\n","    end1 = time.time()\n","    print(\"pętla:\", end1-start1)\n","\n","  end = time.time()\n","  print(\"Czas działania pętli uczenia:\", end-start)\n","  if save:\n","    model.save(filepath='/content/drive/My Drive/Colab Notebooks2/moving_window/'+name)\n","    with open('/content/drive/My Drive/Colab Notebooks2/moving_window/history/history'+name, 'wb') as file_pi:\n","      pickle.dump(history.history, file_pi)\n","\n","  testResults = np.asarray(testResults)\n","  global wyniki\n","  wyniki = wyniki.append({'Model': name, 'MSE': np.mean(testResults[:,1]), 'R2':np.mean(testResults[:,2]), 'Czas':end-start},ignore_index=True)\n","  print(name, \" MSE: \", np.mean(testResults[:,1]), \" R2: \", np.mean(testResults[:,2]))\n","  print('Test loss:', np.mean(testResults[:,0])) \n","  print('Test mse:', np.mean(testResults[:,1]))\n","  print('Test R^2:', np.mean(testResults[:,2]))\n","  print('Test R^2oos:', np.mean(testResults[:,3]))\n","  #plots\n","  metrics = ['mse','R2','R2oos']\n","  for metric in metrics:\n","    plt.plot(history.history[metric])\n","    plt.plot(history.history['val_'+metric])\n","    plt.title(metric+ ' loss')\n","    plt.ylabel(metric)\n","    plt.xlabel('epoch')\n","    plt.legend(['train', 'validation'], loc='center left')\n","    plt.show()\n","  return testResults"],"metadata":{"id":"n1zIr4uWyrix"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["GD_NN1df1 = NN([32],42,1)\n","SGD_NN1df1 = NN([32],42,1)\n","GD_NN2df1 = NN([32,16],42,1)\n","SGD_NN2df1 = NN([32,16],42,1)\n","GD_NN3df1 = NN([32,16,8],42,1)\n","SGD_NN3df1 = NN([32,16,8],42,1)\n","GD_NN4df1 = NN([32,16,8,4],42,1)\n","SGD_NN4df1 = NN([32,16,8,4],42,1)\n","GD_NN5df1 = NN([32,16,8,4,2],42,1)\n","SGD_NN5df1 = NN([32,16,8,4,2],42,1)\n","GD_NN1df = NN([32],14,1)\n","SGD_NN1df = NN([32],14,1)\n","GD_NN2df = NN([32,16],14,1)\n","SGD_NN2df = NN([32,16],14,1)\n","GD_NN3df = NN([32,16,8],14,1)\n","SGD_NN3df = NN([32,16,8],14,1)\n","GD_NN4df = NN([32,16,8,4],14,1)\n","SGD_NN4df = NN([32,16,8,4],14,1)\n","GD_NN5df = NN([32,16,8,4,2],14,1)\n","SGD_NN5df = NN([32,16,8,4,2],14,1)\n","GD_NN1df2 = NN([32],28,1)\n","SGD_NN1df2 = NN([32],28,1)\n","GD_NN2df2 = NN([32,16],28,1)\n","SGD_NN2df2 = NN([32,16],28,1)\n","GD_NN3df2 = NN([32,16,8],28,1)\n","SGD_NN3df2 = NN([32,16,8],28,1)\n","GD_NN4df2 = NN([32,16,8,4],28,1)\n","SGD_NN4df2 = NN([32,16,8,4],28,1)\n","GD_NN5df2 = NN([32,16,8,4,2],28,1)\n","SGD_NN5df2 = NN([32,16,8,4,2],28,1)\n","# wagi sa takie same jezeli dane warstwy sa w obu sieciach\n","# print(GD_NN1df1.get_weights()[0])\n","# print(SGD_NN3df.get_weights()[0])"],"metadata":{"id":"0iv0VXQ4AhJz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#plik z wynikami\n","wyniki = pd.DataFrame({'Model':[], 'MSE':[] , 'R2':[], 'Czas':[]})\n","wyniki\n","# wyniki = wyniki.append({'Model': 'name', 'MSE': 1, 'R2':2, 'Czas':3},ignore_index=True)\n","wyniki.to_excel(excel_writer='/content/drive/My Drive/Colab Notebooks2/wyniki.xlsx')"],"metadata":{"id":"5PqnzV_5CF9P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Trening NN na df1 (42 inputy)\n","print('NN1 GD 42 cechy:')\n","moving_window(layers=[32], inputShape=42, outputShape=1, name='GD_NN1df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='GD', epochs=1000, save=True)\n","print('NN1 SGD 42 cechy:')\n","moving_window(layers=[32], inputShape=42, outputShape=1, name='SGD_NN1df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN2 GD 42 cechy:')\n","moving_window(layers=[32,16], inputShape=42, outputShape=1, name='GD_NN2df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='GD', epochs=1000, save=True)\n","print('NN2 SGD 42 cechy:')\n","moving_window(layers=[32,16], inputShape=42, outputShape=1, name='SGD_NN2df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN3 GD 42 cechy:')\n","moving_window(layers=[32,16,8], inputShape=42, outputShape=1, name='GD_NN3df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='GD', epochs=1000, save=True)\n","print('NN3 SGD 42 cechy:')\n","moving_window(layers=[32,16,8], inputShape=42, outputShape=1, name='SGD_NN3df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN4 GD 42 cechy:')\n","moving_window(layers=[32,16,8,4], inputShape=42, outputShape=1, name='GD_NN4df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='GD', epochs=1000, save=True)\n","print('NN4 SGD 42 cechy:')\n","moving_window(layers=[32,16,8,4], inputShape=42, outputShape=1, name='SGD_NN4df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN5 GD 42 cechy:')\n","moving_window(layers=[32,16,8,4,2], inputShape=42, outputShape=1, name='GD_NN5df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='GD', epochs=1000, save=True)\n","print('NN5 SGD 42 cechy:')\n","moving_window(layers=[32,16,8,4,2], inputShape=42, outputShape=1, name='SGD_NN5df1', data=df1, train_ids=train_ids, test_ids=test_ids, target=target, features=features1, type_of_GD='SGD', epochs=1000, save=True)"],"metadata":{"id":"8QEsGMEMAhV6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Trening NN na df2 (28 inputy)\n","print('NN1 GD 28 cech:')\n","moving_window(layers=[32], inputShape=28, outputShape=1, name='GD_NN1df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='GD', epochs=1000, save=True)\n","print('NN1 SGD 28 cech:')\n","moving_window(layers=[32], inputShape=28, outputShape=1, name='SGD_NN1df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN2 GD 28 cech:')\n","moving_window(layers=[32,16], inputShape=28, outputShape=1, name='GD_NN2df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='GD', epochs=1000, save=True)\n","print('NN2 SGD 28 cech:')\n","moving_window(layers=[32,16], inputShape=28, outputShape=1, name='SGD_NN2df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN3 GD 28 cech:')\n","moving_window(layers=[32,16,8], inputShape=28, outputShape=1, name='GD_NN3df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='GD', epochs=1000, save=True)\n","print('NN3 SGD 28 cechy:')\n","moving_window(layers=[32,16,8], inputShape=28, outputShape=1, name='SGD_NN3df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN4 GD 28 cech:')\n","moving_window(layers=[32,16,8,4], inputShape=28, outputShape=1, name='GD_NN4df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='GD', epochs=1000, save=True)\n","print('NN4 SGD 28 cech:')\n","moving_window(layers=[32,16,8,4], inputShape=28, outputShape=1, name='SGD_NN4df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN5 GD 28 cech:')\n","moving_window(layers=[32,16,8,4,2], inputShape=28, outputShape=1, name='GD_NN5df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='GD', epochs=1000, save=True)\n","print('NN5 SGD 28 cech:')\n","moving_window(layers=[32,16,8,4,2], inputShape=28, outputShape=1, name='SGD_NN5df2', data=df2, train_ids=train_ids, test_ids=test_ids, target=target, features=features2, type_of_GD='SGD', epochs=1000, save=True)"],"metadata":{"id":"sq15GYu_ApbX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Trening NN na df (14 inputów)\n","print('NN1 GD 14 cech:')\n","moving_window(layers=[32], inputShape=14, outputShape=1, name='GD_NN1df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='GD', epochs=1000, save=True)\n","print('NN1 SGD 14 cech:')\n","moving_window(layers=[32], inputShape=14, outputShape=1, name='SGD_NN1df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN2 GD 14 cech:')\n","moving_window(layers=[32,16], inputShape=14, outputShape=1, name='GD_NN2df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='GD', epochs=1000, save=True)\n","print('NN2 SGD 14 cech:')\n","moving_window(layers=[32,16], inputShape=14, outputShape=1, name='SGD_NN2df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN3 GD 14 cech:')\n","moving_window(layers=[32,16,8], inputShape=14, outputShape=1, name='GD_NN3df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='GD', epochs=1000, save=True)\n","print('NN3 SGD 14 cech:')\n","moving_window(layers=[32,16,8], inputShape=14, outputShape=1, name='SGD_NN3df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN4 GD 14 cech:')\n","moving_window(layers=[32,16,8,4], inputShape=14, outputShape=1, name='GD_NN4df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='GD', epochs=1000, save=True)\n","print('NN4 SGD 14 cech:')\n","moving_window(layers=[32,16,8,4], inputShape=14, outputShape=1, name='SGD_NN4df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='SGD', epochs=1000, save=True)\n","print('NN5 GD 14 cech:')\n","moving_window(layers=[32,16,8,4,2], inputShape=14, outputShape=1, name='GD_NN5df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='GD', epochs=1000, save=True)\n","print('NN5 SGD 14 cech:')\n","moving_window(layers=[32,16,8,4,2], inputShape=14, outputShape=1, name='SGD_NN5df', data=df, train_ids=train_ids, test_ids=test_ids, target=target, features=features, type_of_GD='SGD', epochs=1000, save=True)"],"metadata":{"id":"8r8rYiD8Apho"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#zapisz\n","wyniki.to_excel(excel_writer='/content/drive/My Drive/Colab Notebooks2/wyniki.xlsx')"],"metadata":{"id":"jJj9bXQnMEwi"},"execution_count":null,"outputs":[]}]}